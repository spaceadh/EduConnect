[{"/home/victoralvin/Pictures/Educonnect/Client/src/index.js":"1","/home/victoralvin/Pictures/Educonnect/Client/src/App.js":"2","/home/victoralvin/Pictures/Educonnect/Client/src/reportWebVitals.js":"3","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Layout/Layout.js":"4","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/AppLayout.js":"5","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/ChatWithLecturers.js":"6","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Register/RegisterPage.js":"7","/home/victoralvin/Pictures/Educonnect/Client/src/Components/ForgotPassword/ForgotPasswordPage.js":"8","/home/victoralvin/Pictures/Educonnect/Client/src/Components/NotFound/NotFound.js":"9","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Login/Login.js":"10","/home/victoralvin/Pictures/Educonnect/Client/src/Components/SuccessPage/SuccessPage.js":"11","/home/victoralvin/Pictures/Educonnect/Client/src/Components/OTP/OTPVerification.js":"12","/home/victoralvin/Pictures/Educonnect/Client/src/UserContext.js":"13","/home/victoralvin/Pictures/Educonnect/Client/src/firebase.js":"14","/home/victoralvin/Pictures/Educonnect/Client/src/apis/auth.js":"15","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/dashboard.js":"16","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/groupChats.js":"17","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/ChatBot.js":"18","/home/victoralvin/Pictures/Educonnect/Client/src/Components/apis/triggeranswers.js":"19","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/UploadDocument.js":"20"},{"size":639,"mtime":1711436688294,"results":"21","hashOfConfig":"22"},{"size":2324,"mtime":1711436699086,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1706865684000,"results":"24","hashOfConfig":"22"},{"size":665,"mtime":1706865684000,"results":"25","hashOfConfig":"22"},{"size":278,"mtime":1711433313692,"results":"26","hashOfConfig":"22"},{"size":3786,"mtime":1711528489490,"results":"27","hashOfConfig":"22"},{"size":5028,"mtime":1711434833461,"results":"28","hashOfConfig":"22"},{"size":1989,"mtime":1711415172130,"results":"29","hashOfConfig":"22"},{"size":549,"mtime":1706865684000,"results":"30","hashOfConfig":"22"},{"size":3506,"mtime":1711564005802,"results":"31","hashOfConfig":"22"},{"size":847,"mtime":1706865684000,"results":"32","hashOfConfig":"22"},{"size":3386,"mtime":1706865684000,"results":"33","hashOfConfig":"22"},{"size":2131,"mtime":1711523569383,"results":"34","hashOfConfig":"22"},{"size":850,"mtime":1711530339632,"results":"35","hashOfConfig":"22"},{"size":4736,"mtime":1711558139012,"results":"36","hashOfConfig":"22"},{"size":3734,"mtime":1711530154100,"results":"37","hashOfConfig":"22"},{"size":3567,"mtime":1711552812388,"results":"38","hashOfConfig":"22"},{"size":6879,"mtime":1711561155755,"results":"39","hashOfConfig":"22"},{"size":659,"mtime":1711526659988,"results":"40","hashOfConfig":"22"},{"size":10341,"mtime":1711557941498,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1blxrev",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"/home/victoralvin/Pictures/Educonnect/Client/src/index.js",[],["91","92"],"/home/victoralvin/Pictures/Educonnect/Client/src/App.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/reportWebVitals.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/Layout/Layout.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/AppLayout.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/ChatWithLecturers.js",["93"],"import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { ref, push, set } from 'firebase/database';\nimport { database } from '../../firebase';\nimport { format } from 'date-fns';\nimport './ChatWithLecturers.css'; // Import CSS file for styling\n\nconst ChatWithLecturers = ({ userData }) => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  const { studentId, fullname, lecturerId, groupName, lecturerName } = userData;\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const url = \"http://localhost:5001\"; // Update the URL to match your server endpoint\n        const response = await axios.get(`${url}/api/messages/retrievemessage/${studentId}/${lecturerId}`);\n        console.log(response.data);\n        const { messages } = response.data; // Access the messages object\n        if (messages) {\n          const messageList = Object.values(messages); // Convert messages object to array\n          messageList.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n          setMessages(messageList);\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n\n    fetchMessages();\n  }, [studentId, lecturerId]);\n\n  const formatTimestamp = (timestamp) => {\n    return format(new Date(timestamp), \"yyyy-MM-dd HH:mm:ss\");\n  };\n\n  const sendMessage = async () => {\n    try {\n      // Check if the newMessage is not empty\n      if (!newMessage.trim()) {\n        toast.error('Cannot send empty message', {\n          position: toast.POSITION.TOP_RIGHT,\n        });\n        return; // Exit the function if the message is empty\n      }\n\n      const newMsgRef = push(ref(database, `messages/${lecturerId}/${studentId}/messages`));\n      const newMsgData = {\n        senderId: studentId,\n        message: newMessage,\n        fullname: fullname,\n        timestamp: new Date().toISOString()\n      };\n      await set(newMsgRef, newMsgData);\n\n      const newMsg = {\n        senderId: studentId,\n        message: newMessage,\n        fullname: fullname,\n        timestamp: new Date().toISOString()\n      };\n      setMessages([...messages, newMsg]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  return (\n    <div className=\"Chatbot\">\n      <div className=\"group-name-container\">\n        <p>Chat with {lecturerName}</p>\n      </div>\n      <div className=\"messages-wrapper\">\n        {messages.length === 0 ? (\n          <div className=\"no-messages-card\">\n            <p>You haven't contacted {lecturerName} yet.</p>\n          </div>\n        ) : (\n          messages.map((message, index) => (\n            <div\n              className={`chat-bubble ${message.senderId === studentId ? \"right\" : \"\"}`}\n              key={index}\n            >\n              <div className=\"chat-bubble__right\">\n                <p className=\"user-name\">{message.fullname}</p>\n                <p className=\"user-message\">{message.message}</p>\n                <span className=\"message-time\">\n                  {formatTimestamp(message.timestamp)}\n                </span>\n              </div>\n              {message.senderId === studentId && <div className=\"message-divider\"></div>}\n            </div>\n          ))\n        )}\n      </div>\n      <div className=\"send-message\">\n        <input\n          id=\"messageInput\"\n          type=\"text\"\n          className=\"form-input__input\"\n          placeholder=\"type message...\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n        />\n        <button onClick={sendMessage} type=\"button\">Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWithLecturers;","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Register/RegisterPage.js",["94","95"],"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate instead of useHistory\nimport { useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Link } from 'react-router-dom';\nimport \"../Register/RegisterPage.css\";\nimport Logo from './kcalogo.jpeg';\nimport {registerUser} from '../../apis/auth';\nimport { useUserContext } from '../../UserContext'; \n\nconst RegisterPage = () => {\n  const navigate = useNavigate(); // Use useNavigate instead of useHistory\n  const [username, setUsername] = useState('');\n  const [firstname,setFirstname]= useState('');\n  const [lastname,setLastname]=useState('');\n  const [loading, setLoading] = useState(false);\n  const { setUserDetails } = useUserContext();\n  // console.log('Username : ', username);\n  const [email, setEmail] = useState('');\n  // console.log('Email : ', email);\n  const [password, setPassword] = useState('');\n  // console.log('Password : ', password);\n  const [regno, setRegno] = useState('');\n  // console.log('RegNo : ', regno);\n\n  const [confirmpassword,setConfirmPassword] = useState('');\n\n \n  const handleRegistration = async (e) => {\n    e.preventDefault();\n    if (password !== confirmpassword) {\n      toast.error('Password and Confirm Password do not match', {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n      return;\n    }\n    if (!email.endsWith('@students.kcau.ac.ke')) {\n      toast.error('Please use a valid email address ending with @students.kcau.ac.ke', {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    return;\n    }\n    try {\n      // Call the API to log in the student\n      const data = {\n        username,\n        firstname,\n        lastname,\n        regno,\n        email,\n        password\n      };\n      const response = await registerUser(data);\n      console.log(\"User Context Set: \", response.data);\n      setUserDetails(response.data.user);\n      console.log(\"User Context Set: \", response.data.user);\n      // You can also perform other actions after successful registration\n      navigate('/dashboard', { replace: true });\n\n      toast.success('User registered successfully ✅', {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    } catch (error) {\n      // Handle login error\n      // console.error('Login failed', error);\n      toast.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"logo-container\">\n          <img src={Logo} alt=\"Logo\" className=\"logo-image\" />\n        </div>\n        <h3>Register for proper </h3>\n\n        <form onSubmit={handleRegistration}>\n\n        {/* <label htmlFor=\"regno\">Regno:</label> */}\n        <input \n          type=\"text\"\n          id=\"regno\" \n          name=\"regno\" \n          placeholder='Registration Number eg 19xxxxx'\n          value={regno} \n          maxLength={7} // Limit to 7 characters\n          pattern=\"\\d*\" // Only allow digits\n          onChange={(e) => {\n            // Limit input to 7 digits\n            const input = e.target.value.slice(0, 7);\n            // Update state with only digits\n            setRegno(input.replace(/\\D/g, '')); \n          }} \n          required \n        />\n\n          {/* <label htmlFor=\"username\">Username:</label> */}\n          <input type=\"text\" id=\"username\" \n          name=\"username\"\n          placeholder='Username'\n          value={username} onChange={(e) => setUsername(e.target.value)} required />\n\n          <input type=\"text\" id=\"firstname\" \n          name=\"firstname\"\n          placeholder='Firstname'\n          value={firstname} onChange={(e) => setFirstname(e.target.value)} required />\n\n          <input type=\"text\" id=\"lastname\" \n          name=\"lastname\"\n          placeholder='Lastname'\n          value={lastname} onChange={(e) => setLastname(e.target.value)} required />\n\n          {/* <label htmlFor=\"email\">Email:</label> */}\n          <input type=\"email\"\n          id=\"email\" \n          name=\"email\" \n          placeholder='Email Address'\n          value={email} \n          onChange={(e) => setEmail(e.target.value)} required />\n\n          {/* <label htmlFor=\"password\">Password:</label> */}\n          <input type=\"password\" \n          id=\"password\" \n          name=\"password\" \n          placeholder='Password'\n          value={password} \n          onChange={(e) => setPassword(e.target.value)}\n          required />\n\n          {/* <label htmlFor=\"confirmpassword\">Confirm Password:</label> */}\n          <input type=\"password\" \n          id=\"confirmpassword\" \n          name=\"confirmpassword\" \n          placeholder='Confirm Password'\n          value={confirmpassword} \n          onChange={(e) => setConfirmPassword(e.target.value)}\n          required />\n\n          <button type=\"submit\">Register</button>\n        </form>\n\n        <p>\n           <Link to=\"/login\">Login</Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","/home/victoralvin/Pictures/Educonnect/Client/src/Components/ForgotPassword/ForgotPasswordPage.js",["96","97","98","99","100"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';  // Import Link from react-router-dom\nimport { useLocation } from 'react-router-dom';\nimport \"../ForgotPassword/ForgotPasswordPage.css\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { auth } from '../../firebase';\nimport { sendPasswordResetEmail } from 'firebase/auth';\n//import Logo from './kcalogo.jpeg';\nimport {resetPassword} from '../../apis/auth';\n\nconst ForgotPasswordPage = () => {\n  const [email, setEmail] = useState('');\n  const [setIsEmailSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handlePasswordReset = async (e) => {\n    e.preventDefault();\n    try {\n      // Call the API to log in the user\n      const data = {\n        email\n      };\n      const response = await resetPassword(data);\n      setIsEmailSent(true);\n      toast.success('Email reset password-link sent successfully', {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    } catch (error) {\n      toast.error(`Error sending password reset email.`, {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    } finally {\n      setLoading(false);\n    } \n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        {/* <div className=\"logo-container\">\n          <img src={Logo} alt=\"Logo\" className=\"logo-image\" />\n        </div> */}\n        <h4>Reset your Password</h4>\n        <form onSubmit={handlePasswordReset}>\n\n          <label htmlFor=\"email\">Email:</label>\n          <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n\n          <button type=\"submit\">Send me Instructions</button>\n        </form>\n        <p>\n           <Link to=\"/login\">Login</Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPasswordPage;\n","/home/victoralvin/Pictures/Educonnect/Client/src/Components/NotFound/NotFound.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/Login/Login.js",["101","102","103","104","105","106","107","108"],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/SuccessPage/SuccessPage.js",["109"],"import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport NotFoundImage from '../SuccessPage/successPage.jpg';\nimport '../SuccessPage/SuccessPage.css';\n\nconst SuccessPage = () => {\n  const location = useLocation();\n  const extractedDetails = location.state?.extractedDetails;\n\n  const { unitCode, venue, formattedDate, formattedTime, lecturersUserId } = extractedDetails || {};\n\n  return (\n    <div className=\"not-found-container\">\n      <img src={NotFoundImage} alt=\"404 Not Found\" className=\"not-found-image\" />\n      <div className=\"not-found-text\">\n        <h2>Successfully Marked Attendance for {unitCode}</h2>\n        <p>\n          on {formattedDate} at {formattedTime}, held in the venue {venue}. Thank you for using Tranquil QRCode Scanner.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default SuccessPage;\n","/home/victoralvin/Pictures/Educonnect/Client/src/Components/OTP/OTPVerification.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/UserContext.js",["110"],"// UserContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\n\nconst UserContext = createContext();\n\nexport const useUserContext = () => {\n  return useContext(UserContext);\n};\n\nexport const UserProvider = ({ children }) => {\n  const [storedData, setStoredData] = useState({});\n  const [student, setUser] = useState(() => {\n    // Initialize state from localStorage if available\n    const storedUser = localStorage.getItem('student');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('student');\n    console.log('Stored user:', storedUser); // Check if the stored user data is retrieved\n    const initialUser = storedUser ? JSON.parse(storedUser) : null;\n    setUser(initialUser);\n  }, []);\n\n  useEffect(() => {\n    const localStorageData = {};\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      const value = localStorage.getItem(key);\n      localStorageData[key] = value;\n    }\n    console.log('localStorageData:', localStorageData); // Log the collected data\n    setStoredData(localStorageData);\n  }, []);\n\n  const setUserDetails = (userData) => {\n    // Destructure the properties you want to keep\n    // eslint-disable-next-line camelcase\n    const { studentId,username,firstname,lastname,regno,fullname,email,lecturerId,groupName,lecturerName } = userData;\n    // Create a new object with only the properties you want to keep\n    const updatedUserData = {\n      studentId,\n      username,\n      firstname,\n      lastname,\n      regno,\n      groupName,\n      fullname,\n      email,\n      lecturerId,\n      lecturerName\n    };\n        \n    setUser(updatedUserData);\n  \n    // Save the trimmed student details to localStorage\n    localStorage.setItem('student', JSON.stringify(updatedUserData));\n  };\n  \n  useEffect(() => {\n    // Cleanup localStorage on component unmount\n    return () => {\n      localStorage.removeItem('student');\n    };\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ student, setUserDetails }}>\n      {children}\n    </UserContext.Provider>\n  );\n};","/home/victoralvin/Pictures/Educonnect/Client/src/firebase.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/apis/auth.js",["111","112","113"],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/dashboard.js",["114","115","116","117"],"import React, { useState, useEffect } from 'react';\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport { useNavigate } from 'react-router-dom';\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport { auth } from '../../firebase'; // Adjust the path accordingly\nimport { FaSignOutAlt } from 'react-icons/fa';\nimport { useUserContext } from '../../UserContext';\nimport ChatWithLecturers from './ChatWithLecturers'; // Import the ChatWithLecturers component here\nimport GroupChats from './groupChats';\nimport Chatbot from './ChatBot';\nimport UploadDocument from './UploadDocument'\nimport './Sidebar.css';\n\nconst Sidebar = () => {\n  const [activeTab, setActiveTab] = useState('upload_document'); // Default active tab\n  const [userData, setUserData] = useState(null);\n  const navigate = useNavigate();\n  const { setUser } = useUserContext(); // Assuming setUser is provided by UserContext\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        // const user = auth.currentUser;\n        const student = JSON.parse(localStorage.getItem('student'));\n        if (student) {\n          // User is signed in\n          // const student = JSON.parse(localStorage.getItem('student'));\n          setUserData(student);\n        } else {\n          // No user signed in, navigate to login page\n          console.error('No user signed in');\n          navigate('/login', { replace: true });\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    fetchUserData();\n\n    // Clean up function\n    return () => {\n      // Cleanup code if needed\n    };\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  const handleTabClick = (tabName) => {\n    setActiveTab(tabName);\n  };\n\n  const handleLogout = () => {\n    // Implement logout functionality here\n  };\n\n  if (!userData) {\n    return null; // Or loading indicator\n  }\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'upload_document':\n        return <UploadDocument userData={userData} />;\n      case 'chat_with_lecturer':\n        return <ChatWithLecturers userData={userData} />;\n      case 'group_chats':\n        return <GroupChats userData={userData} />;\n      case 'ai_chats':\n        return <Chatbot userData={userData} />;  \n      default:\n        return null;\n    }\n  };\n\n  const { username, regno } = userData;\n\n  return (\n    <div className=\"sidebar-layout\">\n      <ProSidebar className=\"pro-sidebar\">\n        <div className=\"sidebar-header\">\n          <h3>{username}</h3>\n          <h4>{regno}</h4>\n        </div>\n        <Menu iconShape=\"square\">\n          <MenuItem\n            active={activeTab === 'upload_document'}\n            onClick={() => handleTabClick('upload_document')}\n          >\n            Upload Document\n          </MenuItem>\n          <MenuItem\n            active={activeTab === 'chat_with_lecturer'}\n            onClick={() => handleTabClick('chat_with_lecturer')}\n          >\n            Chat with Lecturer\n          </MenuItem>\n          <MenuItem\n            active={activeTab === 'ai_chats'}\n            onClick={() => handleTabClick('ai_chats')}\n          >\n            EduConnectBot\n          </MenuItem>\n          <MenuItem\n            active={activeTab === 'group_chats'}\n            onClick={() => handleTabClick('group_chats')}\n          >\n            Group Chats\n          </MenuItem>\n        </Menu>\n        <div className=\"sidebar-footer\">\n          <MenuItem icon={<FaSignOutAlt />} onClick={handleLogout}>\n            Logout\n          </MenuItem>\n        </div>\n      </ProSidebar>\n      <div className=\"main-content\">\n        {renderTabContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/groupChats.js",[],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/ChatBot.js",["118","119"],"/home/victoralvin/Pictures/Educonnect/Client/src/Components/apis/triggeranswers.js",["120"],"import React from \"react\";\nimport {GoogleGenerativeAI} from '@google/generative-ai';\nconst genAI = new GoogleGenerativeAI('AIzaSyBgWiIo1jG67broYNEw7Umi5H4XYiYJpx8');\n\nexport async function triggerAnswers(message){\n    const generationConfig = {\n        stopSequences: [\"red\"],\n        maxOutputTokens:300,\n        temperature:0.9,\n        topP:0.1,\n        topK:16,\n    }\n    const model = genAI.getGenerativeModel({ model: 'gemini-pro' },generationConfig);\n\n    const result = await model.generateContent(message);\n    const response = await result.response;\n    console.log(\"Response :\",response);\n    const text = await response.text();\n    return text;\n\n}","/home/victoralvin/Pictures/Educonnect/Client/src/Components/Dashboard/UploadDocument.js",["121","122","123"],"import React, { useState,useEffect } from 'react';\nimport axios from 'axios';\nimport { ref, update } from 'firebase/database';\nimport {\n  getDownloadURL,\n  ref as storageRef,\n  uploadBytes,\n} from \"firebase/storage\";\nimport {toast} from 'react-toastify';\n\nimport { database,storage } from '../../firebase';\nimport { Card, CardContent, CardActions, Button, Divider, CircularProgress } from '@mui/material';\nimport UploadFile from '@mui/icons-material/UploadFile';\nimport './UploadDocument.css'; // Custom CSS for additional styling\n\nconst UploadDocument = ({ userData }) => {\n  const [proposalFile, setProposalFile] = useState(null);\n  const [srsFile, setSRSFile] = useState(null);\n  const [sdsFile, setSDSFile] = useState(null);\n  const [uploadUrl, setUploadUrl] = useState(''); // State variable for newly uploaded image URL\n  const [implementationFile, setImplementationFile] = useState(null);\n  const [testPlanFile, setTestPlanFile] = useState(null);\n  const [finalDocumentFile, setFinalDocumentFile] = useState(null);\n  const [acceptanceStatus, setAcceptanceStatus] = useState({\n    proposal: 'Pending',\n    srs: 'Pending',\n    sds: 'Pending',\n    implementation: 'Pending',\n    testPlan: 'Pending',\n    finalDocument: 'Pending'\n  });\n  const [isLoading, setIsLoading] = useState(false); // State variable for loading indicator\n  const { studentId, fullname, lecturerId,groupName } = userData;\n\n  useEffect(() => {\n    const fetchAcceptanceStatus = async () => {\n      const documentTypes = ['proposal', 'srs', 'sds', 'implementation', 'testPlan', 'finalDocument'];\n  \n      try {\n        for (const documentType of documentTypes) {\n          const url = \"http://localhost:5001\"\n          const response = await axios.get(`${url}/api/retrieveDocStatus/${lecturerId}/${fullname}/${documentType}`);\n          if (response.status === 200) {\n            const { acceptanceStatus } = response.data; // Assuming your API response contains the acceptance status\n            setAcceptanceStatus(prevStatus => ({\n              ...prevStatus,\n              [documentType]: acceptanceStatus\n            }));\n          } else {\n            console.error(`Failed to fetch acceptance status for ${documentType}`);\n            // Handle error if needed\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching acceptance status:', error);\n        // Handle error if needed\n      }\n    };\n  \n    fetchAcceptanceStatus();\n  }, [lecturerId, fullname]);\n\n  const handleFileChange = async (event, setter, documentType) => {\n    const file = event.target.files[0];\n    setter(file);\n    handleUpload(file, documentType);\n  };  \n\n  const handleUpload = async (file, documentType) => {\n    if (!file) return;\n\n    setIsLoading(true); // Set loading state to true\n\n    const imageRef = storageRef(storage, `documents/${lecturerId}/${fullname}/${documentType}`);\n      \n    uploadBytes(imageRef, file)\n          .then((snapshot) => {\n            getDownloadURL(snapshot.ref)\n              .then((url) => {\n                setUploadUrl(url);\n                toast.success(\"Image uploaded successfully!\");\n                const docRef = ref(database, `Documents/${lecturerId}/${fullname}/${documentType}`);\n                update(docRef, { url, acceptance: \"Submitted\" });\n                console.log(\"Status Changed to submitter\");\n\n                // Update acceptance status locally\n                setAcceptanceStatus(prevStatus => ({\n                  ...prevStatus,\n                  [documentType]: \"Submitted\"\n                }));\n              })\n              .catch((error) => {\n                console.error('Failed to get download URL:', error);\n                toast.error('Failed to get download URL. Please try again later.');\n              })\n              .finally(() => {\n                setIsLoading(false); // Set loading state to false when handling is done\n              });\n          })\n          .catch((error) => {\n            console.error('Failed to upload image:', error);\n            toast.error('Failed to upload image. Please try again later.');\n            setIsLoading(false); // Set loading state to false when handling is done\n          });\n  };\n\n  return (\n    <div className=\"upload-document-page\">\n      <div className=\"document-section\">\n      <Card className=\"document-card\">\n          <CardContent>\n            <label htmlFor=\"proposal\">Proposal</label>\n            <input\n              type=\"file\"\n              id=\"proposal\"\n              accept=\".pdf\" \n              onChange={(e) => handleFileChange(e, setProposalFile, 'proposal')}\n              style={{ display: 'none' }} \n            />\n            <label htmlFor=\"proposal\">\n              <Button variant=\"contained\" component=\"span\" startIcon={<UploadFile />}>\n                Select PDF\n              </Button>\n            </label>\n          </CardContent>\n          <CardActions>\n            {proposalFile && <CircularProgress size={24} className=\"upload-loader\" />}\n            <Divider />\n            {isLoading ? (\n              <CircularProgress size={24} className=\"upload-loader\" />\n            ) : (\n              <p className=\"acceptance-status\">Acceptance Status: {acceptanceStatus.proposal}</p>\n            )}\n          </CardActions>\n        </Card>\n\n         <Card className=\"document-card\">\n          <CardContent>\n            <label htmlFor=\"srs\">SRS</label>\n            <input\n              type=\"file\"\n              id=\"srs\"\n              accept=\".pdf\" \n              onChange={(e) => handleFileChange(e, setSRSFile, 'srs')}\n              style={{ display: 'none' }} \n            />\n            <label htmlFor=\"srs\">\n              <Button variant=\"contained\" component=\"span\" startIcon={<UploadFile />}>\n                Select PDF\n              </Button>\n            </label>\n          </CardContent>\n          <CardActions>\n            {srsFile && <CircularProgress size={24} className=\"upload-loader\" />}\n            <Divider />\n            {isLoading ? (\n              <CircularProgress size={24} className=\"upload-loader\" />\n            ) : (\n              <p className=\"acceptance-status\">Acceptance Status: {acceptanceStatus.srs}</p>\n            )}\n          </CardActions>\n        </Card>\n\n        <Card className=\"document-card\">\n          <CardContent>\n            <label htmlFor=\"sds\">SDS</label>\n            <input\n              type=\"file\"\n              id=\"sds\"\n              accept=\".pdf\" \n              onChange={(e) => handleFileChange(e, setSDSFile, 'sds')}\n              style={{ display: 'none' }} \n            />\n            <label htmlFor=\"sds\">\n              <Button variant=\"contained\" component=\"span\" startIcon={<UploadFile />}>\n                Select PDF\n              </Button>\n            </label>\n          </CardContent>\n          <CardActions>\n            {sdsFile && <CircularProgress size={24} className=\"upload-loader\" />}\n            <Divider />\n            {isLoading ? (\n              <CircularProgress size={24} className=\"upload-loader\" />\n            ) : (\n              <p className=\"acceptance-status\">Acceptance Status: {acceptanceStatus.sds}</p>\n            )}\n          </CardActions>\n        </Card>\n      </div>\n      <div className=\"document-section\">\n       <Card className=\"document-card\">\n          <CardContent>\n            <label htmlFor=\"implementation\">Implementation</label>\n            <input\n              type=\"file\"\n              id=\"implementation\"\n              accept=\".pdf\" \n              onChange={(e) => handleFileChange(e, setImplementationFile, 'implementation')}\n              style={{ display: 'none' }} \n            />\n            <label htmlFor=\"implementation\">\n              <Button variant=\"contained\" component=\"span\" startIcon={<UploadFile />}>\n                Select PDF\n              </Button>\n            </label>\n          </CardContent>\n          <CardActions>\n            {implementationFile && <CircularProgress size={24} className=\"upload-loader\" />}\n            <Divider />\n            {isLoading ? (\n              <CircularProgress size={24} className=\"upload-loader\" />\n            ) : (\n              <p className=\"acceptance-status\">Acceptance Status: {acceptanceStatus.implementation}</p>\n            )}\n          </CardActions>\n      </Card>\n      <Card className=\"document-card\">\n          <CardContent>\n            <label htmlFor=\"testPlan\">Test Plan</label>\n            <input\n              type=\"file\"\n              id=\"testPlan\"\n              accept=\".pdf\"\n              onChange={(e) => handleFileChange(e, setTestPlanFile, 'testPlan')} \n              style={{ display: 'none' }} \n            />\n            <label htmlFor=\"testPlan\">\n              <Button variant=\"contained\" component=\"span\" startIcon={<UploadFile />}>\n                Select PDF\n              </Button>\n            </label>\n          </CardContent>\n          <CardActions>\n            {testPlanFile && <CircularProgress size={24} className=\"upload-loader\" />}\n            <Divider />\n            {isLoading ? (\n              <CircularProgress size={24} className=\"upload-loader\" />\n            ) : (\n              <p className=\"acceptance-status\">Acceptance Status: {acceptanceStatus.testPlan}</p>\n            )}\n          </CardActions>\n        </Card>\n\n        <Card className=\"document-card\">\n          <CardContent>\n            <label htmlFor=\"finalDocument\">Final Document</label>\n            <input\n              type=\"file\"\n              id=\"finalDocument\"\n              accept=\".pdf\" \n              onChange={(e) => handleFileChange(e, setFinalDocumentFile, 'finalDocument')} \n              style={{ display: 'none' }} \n            />\n            <label htmlFor=\"finalDocument\">\n              <Button variant=\"contained\" component=\"span\" startIcon={<UploadFile />}>\n                Select PDF\n              </Button>\n            </label>\n          </CardContent>\n          <CardActions>\n            {finalDocumentFile && <CircularProgress size={24} className=\"upload-loader\" />}\n            <Divider />\n            {isLoading ? (\n              <CircularProgress size={24} className=\"upload-loader\" />\n            ) : (\n              <p className=\"acceptance-status\">Acceptance Status: {acceptanceStatus.finalDocument}</p>\n            )}\n          </CardActions>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadDocument;",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":13,"column":44,"nodeType":"130","messageId":"131","endLine":13,"endColumn":53},{"ruleId":"128","severity":1,"message":"132","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":21},{"ruleId":"128","severity":1,"message":"133","line":17,"column":10,"nodeType":"130","messageId":"131","endLine":17,"endColumn":17},{"ruleId":"128","severity":1,"message":"132","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":21},{"ruleId":"128","severity":1,"message":"134","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":14},{"ruleId":"128","severity":1,"message":"135","line":8,"column":10,"nodeType":"130","messageId":"131","endLine":8,"endColumn":32},{"ruleId":"128","severity":1,"message":"133","line":15,"column":10,"nodeType":"130","messageId":"131","endLine":15,"endColumn":17},{"ruleId":"128","severity":1,"message":"136","line":24,"column":13,"nodeType":"130","messageId":"131","endLine":24,"endColumn":21},{"ruleId":"128","severity":1,"message":"137","line":6,"column":10,"nodeType":"130","messageId":"131","endLine":6,"endColumn":21},{"ruleId":"128","severity":1,"message":"138","line":6,"column":23,"nodeType":"130","messageId":"131","endLine":6,"endColumn":26},{"ruleId":"128","severity":1,"message":"139","line":7,"column":9,"nodeType":"130","messageId":"131","endLine":7,"endColumn":12},{"ruleId":"128","severity":1,"message":"140","line":7,"column":13,"nodeType":"130","messageId":"131","endLine":7,"endColumn":16},{"ruleId":"128","severity":1,"message":"141","line":8,"column":15,"nodeType":"130","messageId":"131","endLine":8,"endColumn":23},{"ruleId":"128","severity":1,"message":"142","line":12,"column":9,"nodeType":"130","messageId":"131","endLine":12,"endColumn":25},{"ruleId":"128","severity":1,"message":"143","line":20,"column":9,"nodeType":"130","messageId":"131","endLine":20,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":33,"column":7,"nodeType":"146","messageId":"147","endLine":33,"endColumn":16},{"ruleId":"128","severity":1,"message":"148","line":10,"column":58,"nodeType":"130","messageId":"131","endLine":10,"endColumn":73},{"ruleId":"128","severity":1,"message":"149","line":11,"column":10,"nodeType":"130","messageId":"131","endLine":11,"endColumn":20},{"ruleId":"128","severity":1,"message":"150","line":11,"column":13,"nodeType":"130","messageId":"131","endLine":11,"endColumn":19},{"ruleId":"128","severity":1,"message":"150","line":27,"column":13,"nodeType":"130","messageId":"131","endLine":27,"endColumn":19},{"ruleId":"128","severity":1,"message":"151","line":58,"column":13,"nodeType":"130","messageId":"131","endLine":58,"endColumn":18},{"ruleId":"128","severity":1,"message":"152","line":2,"column":38,"nodeType":"130","messageId":"131","endLine":2,"endColumn":45},{"ruleId":"128","severity":1,"message":"134","line":5,"column":10,"nodeType":"130","messageId":"131","endLine":5,"endColumn":14},{"ruleId":"128","severity":1,"message":"153","line":18,"column":11,"nodeType":"130","messageId":"131","endLine":18,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":45,"column":6,"nodeType":"156","endLine":45,"endColumn":8,"suggestions":"157"},{"ruleId":"128","severity":1,"message":"158","line":19,"column":10,"nodeType":"130","messageId":"131","endLine":19,"endColumn":23},{"ruleId":"128","severity":1,"message":"159","line":60,"column":15,"nodeType":"130","messageId":"131","endLine":60,"endColumn":27},{"ruleId":"128","severity":1,"message":"160","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"161","line":20,"column":10,"nodeType":"130","messageId":"131","endLine":20,"endColumn":19},{"ruleId":"128","severity":1,"message":"162","line":33,"column":11,"nodeType":"130","messageId":"131","endLine":33,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":33,"column":43,"nodeType":"130","messageId":"131","endLine":33,"endColumn":52},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'groupName' is assigned a value but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'loading' is assigned a value but never used.","'auth' is defined but never used.","'sendPasswordResetEmail' is defined but never used.","'response' is assigned a value but never used.","'getDatabase' is defined but never used.","'get' is defined but never used.","'ref' is defined but never used.","'set' is defined but never used.","'database' is defined but never used.","'studentloginUser' is defined but never used.","'setUserDetails' is assigned a value but never used.","no-dupe-keys","Duplicate key 'groupName'.","ObjectExpression","unexpected","'lecturersUserId' is assigned a value but never used.","'storedData' is assigned a value but never used.","'userId' is assigned a value but never used.","'email' is assigned a value but never used.","'SubMenu' is defined but never used.","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["165"],"'isBadQuestion' is assigned a value but never used.","'TrainingData' is assigned a value but never used.","'React' is defined but never used.","'uploadUrl' is assigned a value but never used.","'studentId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},"Update the dependencies array to be: [navigate]",{"range":"168","text":"169"},[1645,1647],"[navigate]"]